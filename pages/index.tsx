import { useEffect, useState } from 'react';
import {
  GaslessOnboarding,
  GaslessWalletConfig,
  GaslessWalletInterface,
  LoginConfig,
} from '@gelatonetwork/gasless-onboarding';
import { Button, Center, Box, Input, Stack } from '@chakra-ui/react';
import type { NextPage } from 'next';
import Head from 'next/head';
import { SafeEventEmitterProvider, UserInfo } from '@web3auth/base';
import Projects from '@/components/Projects';
import { ethers } from 'ethers';
import CreateProject from '@/components/CreateProject';
import Mint from '@/components/Mint';

const Home: NextPage = () => {
  const [smartWallet, setSmartWallet] = useState<GaslessWalletInterface | null>(
    null
  );
  const [connected, setConnected] = useState(false);
  const [web3AuthProvider, setWeb3AuthProvider] =
    useState<SafeEventEmitterProvider | null>(null);
  const [gelatoLogin, setGelatoLogin] = useState<
    GaslessOnboarding | undefined
  >();
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [isDeployed, setIsDeployed] = useState<boolean>(false);
  const [wallet, setWallet] = useState<{
    address: string;
    balance: string;
    chainId: number;
  } | null>(null);
  const [user, setUser] = useState<Partial<UserInfo> | null>(null);

  const [signer, setSigner] = useState<any>('');

  async function connect() {
    try {
      setIsLoading(true);
      if (!gelatoLogin) {
        return;
      }
      if (gelatoLogin) {
        const smartWallet = await gelatoLogin.login();
        setWeb3AuthProvider(smartWallet);
        setConnected(true);
      }
    } catch (error) {
      console.log(error);

      setConnected(false);
    } finally {
      setIsLoading(false);
    }
  }

  useEffect(() => {
    const init = async () => {
      setIsLoading(true);
      try {
        const smartWalletConfig: GaslessWalletConfig = {
          apiKey: 'WZsIkVdsDJ46zS1Tlc4iEtYoZiIADZWgtPGcTT60PPo_',
        };
        const loginConfig: LoginConfig = {
          chain: {
            id: 84531,
            rpcUrl:
              'https://delicate-evocative-forest.base-goerli.quiknode.pro/5ea844af25c75df309eaa0b76010b72febe250e9/',
          },
          ui: {
            theme: 'dark',
          },
          openLogin: {
            redirectUrl: `${window.location.origin}`,
          },
          domains: ['localhost:3000'],
        };
        const gelatoLogin = new GaslessOnboarding(
          loginConfig,
          smartWalletConfig
        );

        await gelatoLogin.init();

        setGelatoLogin(gelatoLogin);
        const provider = gelatoLogin.getProvider();

        if (provider) {
          setWeb3AuthProvider(provider);
        }
      } catch (error) {
        console.log(error);
      } finally {
        setIsLoading(false);
      }
    };
    init();
  }, []);

  useEffect(() => {
    const init = async () => {
      if (!gelatoLogin || !web3AuthProvider) {
        return;
      }

      setIsLoading(true);
      const web3Provider = new ethers.providers.Web3Provider(web3AuthProvider!);
      const signer = web3Provider.getSigner();
      setSigner(signer);
      setWallet({
        address: await signer.getAddress(),
        balance: (await signer.getBalance()).toString(),
        chainId: await signer.getChainId(),
      });

      const user = await gelatoLogin.getUserInfo();
      setUser(user);

      const gelatoSmartWallet = gelatoLogin.getGaslessWallet();
      setSmartWallet(gelatoSmartWallet);
      setIsDeployed(await gelatoSmartWallet.isDeployed());
      setConnected(true);

      const interval = setInterval(fetchStatus, 5000);
      setIsLoading(false);
      return () => clearInterval(interval);
    };
    init();
  }, [web3AuthProvider]);

  const fetchStatus = async () => {
    if (!smartWallet) {
      return;
    }
  };

  console.log('smartWallet', smartWallet);
  console.log('user', user);
  console.log('wallet', wallet);
  console.log('isDeployed', isDeployed);

  return (
    <div>
      <Head>
        <title>Home</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Box p={4} maxW="80em" w="full" mx="auto" pt="20">
        {isLoading ? (
          <Center>
            <Box>Loading...</Box>
          </Center>
        ) : (
          <>
            {connected ? (
              <>
                <CreateProject
                  signer={signer}
                  web3AuthProvider={web3AuthProvider}
                />
                <Mint signer={signer} web3AuthProvider={web3AuthProvider} />
                <Projects signer={signer} web3AuthProvider={web3AuthProvider} />
              </>
            ) : (
              <>
                <Button onClick={connect}>Connect</Button>
              </>
            )}
          </>
        )}
      </Box>
    </div>
  );
};

export default Home;
